extend type Query {
  emote(id: ObjectID!): Emote
  emotesByID(list: [ObjectID!]!): [EmotePartial!]!
  emotes(
    query: String!
    page: Int
    limit: Int
    filter: EmoteSearchFilter
    sort: Sort
  ): EmoteSearchResult!
}

extend type Subscription {
  emote(id: ObjectID!, init: Boolean): EmotePartial!
}

extend type Mutation {
  emote(id: ObjectID!): EmoteOps!
}

type EmoteOps {
  id: ObjectID!
  update(params: EmoteUpdate!, reason: String): Emote!
    @goField(forceResolver: true)
  rerun: Emote @goField(forceResolver: true)
}

type Emote {
  id: ObjectID!
  name: String!
  flags: Int!
  lifecycle: Int!
  tags: [String!]!
  animated: Boolean!
  created_at: Time!

  owner_id: ObjectID!
  owner: User! @goField(forceResolver: true)

  channels(page: Int, limit: Int): UserSearchResult!
    @goField(forceResolver: true)
  common_names: [EmoteCommonName!]! @goField(forceResolver: true)
  trending: Int @goField(forceResolver: true)

  images(formats: [ImageFormat!]): [Image!]! @goField(forceResolver: true)
  versions: [EmoteVersion!]!
  activity(limit: Int): [AuditLog!]! @goField(forceResolver: true)
  listed: Boolean!

  reports: [Report!]!
    @goField(forceResolver: true)
    @hasPermissions(role: [MANAGE_REPORTS])
}

type EmotePartial {
  id: ObjectID!
  name: String!
  flags: Int!
  lifecycle: Int!
  tags: [String!]!
  animated: Boolean!
  created_at: Time!
  owner_id: ObjectID!
  owner: User! @goField(forceResolver: true)
  images(formats: [ImageFormat!]): [Image!]! @goField(forceResolver: true)
  versions: [EmoteVersion!]!
  listed: Boolean!
}

input EmoteSearchFilter {
  category: EmoteSearchCategory
  case_sensitive: Boolean
  exact_match: Boolean
  ignore_tags: Boolean
}

type EmoteVersion {
  id: ObjectID!
  name: String!
  description: String!
  created_at: Time!
  started_at: Time!
  completed_at: Time!
  images(formats: [ImageFormat!]): [Image!]! @goField(forceResolver: true)
  archive: Archive!
  lifecycle: Int!
  listed: Boolean!
}

type EmoteCommonName {
  name: String!
  count: Int!
}

enum EmoteSearchCategory {
  TOP
  TRENDING_DAY
  TRENDING_WEEK
  TRENDING_MONTH
  FEATURED
  NEW
  GLOBAL
}

type EmoteSearchResult {
  count: Int!
  items: [Emote]!
}

enum ChannelEmoteListItemAction {
  ADD
  UPDATE
  REMOVE
}

input UserEmoteInput {
  id: String!
  channels: [String!]
  alias: String
}

input EmoteUpdate {
  name: String
  version_name: String
  version_description: String
  flags: Int
  owner_id: ObjectID
  tags: [String!]
  listed: Boolean
  deleted: Boolean
}
