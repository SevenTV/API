extend type Mutation {
  createCosmeticPaint(definition: CosmeticPaintInput!): ObjectID!
    @hasPermissions(role: [MANAGE_COSMETICS])

  cosmetics(id: ObjectID!): CosmeticOps!
}

type CosmeticOps {
  id: ObjectID!
  updatePaint(definition: CosmeticPaintInput!): CosmeticPaint!
    @goField(forceResolver: true)
    @hasPermissions(role: [MANAGE_COSMETICS])
}

extend type Query {
  cosmetics(list: [ObjectID!]): CosmeticsQuery!
}

type CosmeticsQuery {
  paints: [CosmeticPaint!]!
  badges: [CosmeticBadge!]!
}

interface Cosmetic {
  id: ObjectID!
  kind: CosmeticKind!
  name: String!
}

type CosmeticBadge implements Cosmetic {
  id: ObjectID!
  kind: CosmeticKind!
  name: String!
  tooltip: String!
  tag: String!
  host: ImageHost!
}

type CosmeticPaint implements Cosmetic {
  id: ObjectID!
  kind: CosmeticKind!
  name: String!

  function: CosmeticPaintFunction!
    @deprecated(reason: "use the 'gradients' property")
  color: Int
  gradients: [CosmeticPaintGradient!]!
  shadows: [CosmeticPaintShadow!]
  flairs: [CosmeticPaintFlair!]
  text: CosmeticPaintText
  angle: Int! @deprecated(reason: "use the 'gradients' property")
  shape: String @deprecated(reason: "use the 'gradients' property")
  image_url: String @deprecated(reason: "use the 'gradients' property")
  repeat: Boolean! @deprecated(reason: "use the 'gradients' property")
  stops: [CosmeticPaintStop!]!
    @deprecated(reason: "use the 'gradients' property")
}

type CosmeticPaintGradient {
  function: CosmeticPaintFunction!
  canvas_repeat: String!
  size: [Float!]
  at: [Float!]
  stops: [CosmeticPaintStop!]!
  angle: Int!
  repeat: Boolean!
  image_url: String
  shape: String
}

type CosmeticPaintStop {
  at: Float!
  color: Int!
  center_at: [Float!]
}

type CosmeticPaintShadow {
  x_offset: Float!
  y_offset: Float!
  radius: Float!
  color: Int!
}

type CosmeticPaintText {
  weight: Int
  shadows: [CosmeticPaintShadow!]
  transform: String
  stroke: CosmeticPaintStroke
  variant: String
}

type CosmeticPaintStroke {
  color: Int!
  width: Float!
}

type CosmeticPaintFlair {
  kind: CosmeticPaintFlairKind!
  x_offset: Float!
  y_offset: Float!
  width: Float!
  height: Float!
  data: String!
}

enum CosmeticPaintFlairKind {
  IMAGE
  VECTOR
  TEXT
}

enum CosmeticKind {
  BADGE
  PAINT
}

enum CosmeticPaintFunction {
  LINEAR_GRADIENT
  RADIAL_GRADIENT
  URL
}

input CosmeticPaintInput {
  name: String!
  function: CosmeticPaintFunction!
  color: Int
  angle: Int
  shape: String
  image_url: String
  repeat: Boolean!
  stops: [CosmeticPaintStopInput!]!
  shadows: [CosmeticPaintShadowInput!]!
}

input CosmeticPaintStopInput {
  at: Float!
  color: Int!
}
input CosmeticPaintShadowInput {
  x_offset: Float!
  y_offset: Float!
  radius: Float!
  color: Int!
}
