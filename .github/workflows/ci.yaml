name: API Lint, Build, Test, Deploy

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  workflow_dispatch:
    inputs:
      deploy:
        description: "Deploy location"
        required: true
        default: "none"
        type: choice
        options:
          - production
          - staging
          - none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-lint-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18.2

      - uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - id: cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('go.sum') }}

      - name: Node Modules Cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}

      - name: install deps
        run: make deps

      - name: install dev_deps
        run: make dev_deps

      - name: Generate structures
        run: make generate

      - name: Run Lint
        run: make lint

  post-lint:
    runs-on: ubuntu-latest
    needs:
      - lint
    if: ${{ failure() }}

    steps:
      - name: Cancel Workflow
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: self
          notifyPRCancel: false
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and Test
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}-build-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - id: buildx-context
        run: |
          docker context create builders

      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
          endpoint: builders

      - name: Build docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
          tags: |
            api:${{ github.sha }}
          build-args: |
            "BUILDER=${{ github.actor }}"
            "VERSION=${{ github.sha }}"
          outputs: |
            type=docker,dest=image.tar
          target: final

      - name: Upload docker image
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar
          retention-days: 3

  deploy:
    name: Deploy
    needs:
      - build
      - lint
    env:
      DEPLOY_PROD: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'production') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'master') }}
      DEPLOY_STAGE: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'staging') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'dev') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'staged')) }}
    if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy != 'none') || (github.event_name == 'push' && github.ref_type == 'branch' && (github.ref_name == 'master' || github.ref_name == 'dev')) || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'staged')) }}
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}-deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: buildx-context
        run: |
          docker context create builders

      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
          endpoint: builders

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load image
        run: |
          docker load --input image.tar
          docker image ls -a

      - name: Log into Harbor Registry
        uses: docker/login-action@v2
        with:
          registry: harbor.disembark.dev
          username: robot$ci
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.1

      - name: "[Production] Tag & Push docker images"
        if: ${{ env.DEPLOY_PROD == 'true' }}
        run: |
          docker tag api:${{ github.sha }} harbor.disembark.dev/production/api:latest
          docker tag api:${{ github.sha }} harbor.disembark.dev/production/api:${{ github.sha }}
          docker push harbor.disembark.dev/production/api:latest
          docker push harbor.disembark.dev/production/api:${{ github.sha }}

      - name: "[Staging] Tag & Push docker images"
        if: ${{ env.DEPLOY_STAGE == 'true' }}
        run: |
          docker tag api:${{ github.sha }} harbor.disembark.dev/staging/api:latest
          docker tag api:${{ github.sha }} harbor.disembark.dev/staging/api:${{ github.sha }}
          docker push harbor.disembark.dev/staging/api:latest
          docker push harbor.disembark.dev/staging/api:${{ github.sha }}

      - name: "[Production] Update deployment template"
        uses: danielr1996/envsubst-action@1.1.0
        if: ${{ env.DEPLOY_PROD == 'true' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        with:
          input: k8s/production.template.yaml
          output: k8s/out.yaml

      - name: "[Staging] Update deployment template"
        uses: danielr1996/envsubst-action@1.1.0
        if: ${{ env.DEPLOY_STAGE == 'true' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        with:
          input: k8s/staging.template.yaml
          output: k8s/out.yaml

      - name: Deploy to k8s
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p ~/.kube
          (echo $KUBE_CONFIG_DATA | base64 -d) >> ~/.kube/config

          kubectl apply -f k8s/out.yaml
